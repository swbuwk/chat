{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport api, { SERVER_URL } from \"../http/index\";\nimport io from \"socket.io-client\";\nimport ChatService from \"../services/ChatService\";\nconst socket = io.connect(SERVER_URL);\nexport { socket };\n\nfunction useRoom(setMembers, setMessage, setMessageHistory, id) {\n  let trueId = id;\n\n  const joinRoom = async (room, user) => {\n    socket.emit(\"join_room\", `room${room}`);\n    const membersAfterPost = await api.post(`/chat/room${room}/members`, {\n      user_id: user.id\n    }).then(res => res.data);\n    setMembers(membersAfterPost);\n    sendMessage(user, `Пользователь ${user.name} присоединился`, room, \"action\");\n  };\n\n  const leaveRoom = async (room, user) => {\n    socket.emit(\"leave_room\", `room${room}`);\n    await api.delete(`/chat/room${room}/members?user=${user.id}`);\n    setMembers([]);\n    sendMessage(user, `Пользователь ${user.name} вышел`, room, \"action\");\n  };\n\n  const sendMessage = (user, message, roomId, type) => {\n    if (message.replace(/\\s+/g, '').length === 0) return;\n    socket.emit(\"send_message\", {\n      id: user.id,\n      name: user.name,\n      message,\n      room: `room${roomId}`,\n      type\n    });\n    setMessage(\"\");\n  };\n\n  const joinPrivateRoom = async (id1, id2) => {\n    const roomId1 = `${id1}-${id2}`;\n    const roomId2 = `${id2}-${id1}`;\n    const privateCandidate1 = await ChatService.checkPrivateChat(roomId1);\n    const privateCandidate2 = await ChatService.checkPrivateChat(roomId2);\n    let roomId;\n\n    if (privateCandidate1.data.length === 1) {\n      roomId = roomId1;\n    } else if (privateCandidate2.data.length === 1) {\n      roomId = roomId2;\n    } else {\n      await ChatService.createPrivateChat(roomId1);\n      await api.post(`/chat/room${roomId1}/members`, {\n        user_id: id1\n      });\n      await api.post(`/chat/room${roomId1}/members`, {\n        user_id: id2\n      });\n    }\n\n    const privateMessages = await ChatService.getMessagesFromChat(roomId);\n    setMessageHistory(privateMessages.data.reverse());\n  };\n\n  return {\n    joinRoom,\n    joinPrivateRoom,\n    leaveRoom,\n    sendMessage,\n    trueId\n  };\n}\n\nexport default useRoom;","map":{"version":3,"names":["useEffect","useState","api","SERVER_URL","io","ChatService","socket","connect","useRoom","setMembers","setMessage","setMessageHistory","id","trueId","joinRoom","room","user","emit","membersAfterPost","post","user_id","then","res","data","sendMessage","name","leaveRoom","delete","message","roomId","type","replace","length","joinPrivateRoom","id1","id2","roomId1","roomId2","privateCandidate1","checkPrivateChat","privateCandidate2","createPrivateChat","privateMessages","getMessagesFromChat","reverse"],"sources":["C:/Users/DENI/Desktop/код/vsCode/authJWT/client/src/hooks/useRoom.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\r\n\r\nimport api, {SERVER_URL} from \"../http/index\"\r\nimport io from \"socket.io-client\"\r\nimport ChatService from \"../services/ChatService\"\r\nconst socket = io.connect(SERVER_URL)\r\nexport {socket}\r\n\r\n\r\nfunction useRoom(setMembers, setMessage, setMessageHistory, id) {\r\n    let trueId = id\r\n\r\n    const joinRoom = async (room, user) => {\r\n        socket.emit(\"join_room\", `room${room}`)\r\n        const membersAfterPost = await api.post(`/chat/room${room}/members`, {user_id: user.id}).then(res => res.data)\r\n        setMembers(membersAfterPost)\r\n\r\n        sendMessage(user, `Пользователь ${user.name} присоединился`, room, \"action\")\r\n    }\r\n\r\n    const leaveRoom = async (room, user) => {\r\n        socket.emit(\"leave_room\", `room${room}`)\r\n        await api.delete(`/chat/room${room}/members?user=${user.id}`)\r\n        setMembers([])\r\n\r\n        sendMessage(user, `Пользователь ${user.name} вышел`, room, \"action\")\r\n    }\r\n      \r\n    const sendMessage = (user, message, roomId, type) => {\r\n        if (message.replace(/\\s+/g, '').length === 0) return\r\n        socket.emit(\"send_message\", {id: user.id, name: user.name, message, room: `room${roomId}`, type})\r\n        \r\n        setMessage(\"\")\r\n    }\r\n\r\n    const joinPrivateRoom = async (id1, id2) => {\r\n        const roomId1 = `${id1}-${id2}`\r\n        const roomId2 = `${id2}-${id1}`\r\n\r\n\r\n        const privateCandidate1 = await ChatService.checkPrivateChat(roomId1)\r\n        const privateCandidate2 = await ChatService.checkPrivateChat(roomId2)\r\n\r\n        let roomId\r\n\r\n        if (privateCandidate1.data.length === 1) {\r\n            roomId = roomId1\r\n        } else if (privateCandidate2.data.length === 1) {\r\n            roomId = roomId2\r\n        } else {\r\n            await ChatService.createPrivateChat(roomId1)\r\n            await api.post(`/chat/room${roomId1}/members`, {user_id: id1})\r\n            await api.post(`/chat/room${roomId1}/members`, {user_id: id2})\r\n        }\r\n        const privateMessages = await ChatService.getMessagesFromChat(roomId)\r\n        setMessageHistory(privateMessages.data.reverse())\r\n\r\n    }\r\n\r\n    return {joinRoom, joinPrivateRoom, leaveRoom, sendMessage, trueId}\r\n}\r\n\r\nexport default useRoom"],"mappings":"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"},"metadata":{},"sourceType":"module"}